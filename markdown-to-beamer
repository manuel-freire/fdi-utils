#!/usr/bin/python3

from subprocess import run
from re import sub
import sys
import argparse
from tempfile import mkdtemp
from shutil import rmtree, move
from glob import glob

pandoc_opts = [
    '-t', 'beamer',
    '-V', 'fontsize=9pt', 
    '-V', 'colorlinks',
    '--template', 'beamer.template'
]

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=\
        "Make a call to pandoc & pdflatex to create a nice beamer pdf file from markdown")
    parser.add_argument("input_file", 
            help="A markdown file to convert to pdf")
    parser.add_argument("--v", action="store_true",
            help="Show full pdflatex output; otherwise silence it")
    parser.add_argument("-o", "--output_file", 
            help="Output file to use. If not specified, uses input with .md extension replaced by .pdf")    
    args = parser.parse_args()
    
    # process input
    pandoc_output_file = args.input_file.replace('.md', '.tex')
    call_string = ['pandoc'] \
        + pandoc_opts \
        + ['-s', args.input_file ] \
        + ['-o', pandoc_output_file  ]
    print('calling pandoc:\n\t', call_string)
    try:
        result = run(call_string, capture_output=True, encoding='UTF-8')
        print(f"pandoc returned {result.returncode}\nErr: {result.stderr}\nOut: {result.stdout}", file=sys.stderr);
    except OSError as e:
        print(f"errored out with {e}; Result: {result.returncode}\nErr: {result.stderr}\nOut: {result.stdout}", file=sys.stderr);
        exit(-1)
    
    aux_dir = mkdtemp()
    if args.output_file is None:
        pdf_output_file = args.input_file.replace('.md', '.pdf')
    else:
        pdf_output_file = args.output_file
    print("Output will be at ", pdf_output_file)
    
    call_string = ['pdflatex']
    if not args.v:
        call_string = call_string + ['-interaction=batchmode']
    call_string = call_string\
        + ['-output-directory', aux_dir] \
        + ['-halt-on-error'] \
        + [pandoc_output_file]
    print('calling pdflatex:\n\t', call_string)
    try:
        result = run(call_string, capture_output=True, encoding='UTF-8')
        if (result.returncode == 1):
          print(f"pdflatex returned {result.returncode}\nErr: {result.stderr}\nOut: {result.stdout}", file=sys.stderr);
          print(f"RE-RUNNING")
          result = run(call_string, capture_output=True, encoding='UTF-8')
        if (result.returncode == 0):
          move(glob(f"{aux_dir}/*.pdf")[0], pdf_output_file)
          rmtree(aux_dir)
          print(f"ok, output in {pdf_output_file}")
        else:
          print(f"pdflatex returned {result.returncode}\nErr: {result.stderr}\nOut: {result.stdout}", file=sys.stderr);
        
    except OSError as e:
        print(f"errored out with {e}; Result: {result.returncode}\nErr: {result.stderr}\nOut: {result.stdout}", file=sys.stderr);
        exit(-1)
